name: build
env:
  VERCEL_ORG_ID: ${{ secrets.VERCEL_ORG_ID }}
  VERCEL_PROJECT_ID: ${{ secrets.VERCEL_PROJECT_ID }}
on:
  push:
    branches: ['master']
  workflow_dispatch:
jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - name: yarn install
        run: yarn
      - name: yarn build
        run: yarn build
  test:
    runs-on: ubuntu-latest
    needs: build
    steps:
      - uses: actions/checkout@v2
      - name: yarn install
        run: yarn
      - name: yarn test
        run: yarn test
  push-ecr:
    runs-on: ubuntu-latest
    name: Docker build and push to ECR
    env:
      ## Repository must be in the format '<BU>/<SQUAD>/<PROJECT NAME | MY NAME>'
      ECR_REPOSITORY: 'cross/devtools/momo'
      ECR_IMAGE_VERSION: '0.2.2'
    steps:
      - name: Checkout
        uses: actions/checkout@v2

      # Exemple of build using docker
      - name: Docker Build
        run: |
          docker build --pull -t ${{ secrets.CONTAINER_REGISTRY_HOST }}/$ECR_REPOSITORY:latest .

      - name: Push to ECR
        uses: olxbr/aws-ecr-push-action@v1
        id: ecr
        with:
          # The complete repository name from ECR {BU}/{TEAM}/{PROJECT} (ex. cross/devtools/devtools-scripts).
          ecr_repository: ${{ env.ECR_REPOSITORY }}
          # Comma-separated string of ECR image tags (ex. latest, 1.0.0)
          tags: 'latest'
          # Keep last N images on ECR (default: 100)
          keep_images: 20
        # Warning! Don't change this env values!
        # Just copy and paste this whole block as is in your repo
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
  deploy-production:
    runs-on: ubuntu-latest
    needs: test
    steps:
      - uses: actions/checkout@v2
      - name: Install Vercel CLI
        run: npm install --global vercel@latest
      - name: Pull Vercel Environment Information
        run: vercel pull --yes --environment=production --token=${{ secrets.VERCEL_TOKEN }}
      - name: Build Project Artifacts
        run: vercel build --prod --token=${{ secrets.VERCEL_TOKEN }}
      - name: Deploy Project Artifacts to Vercel
        run: vercel deploy --prebuilt --prod --token=${{ secrets.VERCEL_TOKEN }}
